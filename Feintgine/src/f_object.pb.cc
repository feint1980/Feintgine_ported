// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: f_object.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "f_object.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* f_vec2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  f_vec2_reflection_ = NULL;
const ::google::protobuf::Descriptor* f_object_color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  f_object_color_reflection_ = NULL;
const ::google::protobuf::Descriptor* f_object_uv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  f_object_uv_reflection_ = NULL;
const ::google::protobuf::Descriptor* f_colider_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  f_colider_reflection_ = NULL;
const ::google::protobuf::Descriptor* f_object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  f_object_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sprite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sprite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Layer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Layer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scence_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_f_5fobject_2eproto() {
  protobuf_AddDesc_f_5fobject_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "f_object.proto");
  GOOGLE_CHECK(file != NULL);
  f_vec2_descriptor_ = file->message_type(0);
  static const int f_vec2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_vec2, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_vec2, y_),
  };
  f_vec2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      f_vec2_descriptor_,
      f_vec2::default_instance_,
      f_vec2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_vec2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_vec2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(f_vec2));
  f_object_color_descriptor_ = file->message_type(1);
  static const int f_object_color_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object_color, color_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object_color, color_g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object_color, color_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object_color, color_a_),
  };
  f_object_color_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      f_object_color_descriptor_,
      f_object_color::default_instance_,
      f_object_color_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object_color, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object_color, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(f_object_color));
  f_object_uv_descriptor_ = file->message_type(2);
  static const int f_object_uv_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object_uv, xy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object_uv, zw_),
  };
  f_object_uv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      f_object_uv_descriptor_,
      f_object_uv::default_instance_,
      f_object_uv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object_uv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object_uv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(f_object_uv));
  f_colider_descriptor_ = file->message_type(3);
  static const int f_colider_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_colider, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_colider, dim_),
  };
  f_colider_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      f_colider_descriptor_,
      f_colider::default_instance_,
      f_colider_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_colider, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_colider, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(f_colider));
  f_object_descriptor_ = file->message_type(4);
  static const int f_object_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object, uv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object, heigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object, coliderlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object, texturepath_),
  };
  f_object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      f_object_descriptor_,
      f_object::default_instance_,
      f_object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(f_object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(f_object));
  Sprite_descriptor_ = file->message_type(5);
  static const int Sprite_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, x_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, y_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, x_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, y_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, prefab_),
  };
  Sprite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sprite_descriptor_,
      Sprite::default_instance_,
      Sprite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sprite));
  Layer_descriptor_ = file->message_type(6);
  static const int Layer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, objects_),
  };
  Layer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Layer_descriptor_,
      Layer::default_instance_,
      Layer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Layer));
  Scence_descriptor_ = file->message_type(7);
  static const int Scence_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scence, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scence, layers_),
  };
  Scence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Scence_descriptor_,
      Scence::default_instance_,
      Scence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Scence));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_f_5fobject_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    f_vec2_descriptor_, &f_vec2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    f_object_color_descriptor_, &f_object_color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    f_object_uv_descriptor_, &f_object_uv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    f_colider_descriptor_, &f_colider::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    f_object_descriptor_, &f_object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sprite_descriptor_, &Sprite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Layer_descriptor_, &Layer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Scence_descriptor_, &Scence::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_f_5fobject_2eproto() {
  delete f_vec2::default_instance_;
  delete f_vec2_reflection_;
  delete f_object_color::default_instance_;
  delete f_object_color_reflection_;
  delete f_object_uv::default_instance_;
  delete f_object_uv_reflection_;
  delete f_colider::default_instance_;
  delete f_colider_reflection_;
  delete f_object::default_instance_;
  delete f_object_reflection_;
  delete Sprite::default_instance_;
  delete Sprite_reflection_;
  delete Layer::default_instance_;
  delete Layer_reflection_;
  delete Scence::default_instance_;
  delete Scence_reflection_;
}

void protobuf_AddDesc_f_5fobject_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016f_object.proto\"\036\n\006f_vec2\022\t\n\001x\030\001 \002(\002\022\t\n"
    "\001y\030\002 \002(\002\"T\n\016f_object_color\022\017\n\007color_r\030\001 "
    "\002(\002\022\017\n\007color_g\030\002 \002(\002\022\017\n\007color_b\030\003 \002(\002\022\017\n"
    "\007color_a\030\004 \002(\002\"7\n\013f_object_uv\022\023\n\002xy\030\001 \002("
    "\0132\007.f_vec2\022\023\n\002zw\030\002 \002(\0132\007.f_vec2\"7\n\tf_col"
    "ider\022\024\n\003pos\030\001 \002(\0132\007.f_vec2\022\024\n\003dim\030\002 \002(\0132"
    "\007.f_vec2\"\264\001\n\010f_object\022\014\n\004name\030\001 \002(\t\022\014\n\004t"
    "ype\030\002 \002(\005\022\030\n\002uv\030\003 \002(\0132\014.f_object_uv\022\r\n\005w"
    "idth\030\004 \002(\002\022\r\n\005heigh\030\005 \002(\002\022\036\n\005color\030\006 \002(\013"
    "2\017.f_object_color\022\037\n\013coliderList\030\007 \003(\0132\n"
    ".f_colider\022\023\n\013texturePath\030\010 \002(\t\"g\n\006Sprit"
    "e\022\r\n\005x_pos\030\001 \002(\002\022\r\n\005y_pos\030\002 \002(\002\022\017\n\007x_sca"
    "le\030\003 \002(\002\022\017\n\007y_scale\030\004 \002(\002\022\r\n\005angle\030\005 \002(\002"
    "\022\016\n\006prefab\030\006 \002(\t\">\n\005Layer\022\014\n\004name\030\001 \002(\t\022"
    "\r\n\005depth\030\002 \002(\005\022\030\n\007objects\030\003 \003(\0132\007.Sprite"
    "\".\n\006Scence\022\014\n\004name\030\001 \002(\t\022\026\n\006layers\030\002 \003(\013"
    "2\006.Layer", 648);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "f_object.proto", &protobuf_RegisterTypes);
  f_vec2::default_instance_ = new f_vec2();
  f_object_color::default_instance_ = new f_object_color();
  f_object_uv::default_instance_ = new f_object_uv();
  f_colider::default_instance_ = new f_colider();
  f_object::default_instance_ = new f_object();
  Sprite::default_instance_ = new Sprite();
  Layer::default_instance_ = new Layer();
  Scence::default_instance_ = new Scence();
  f_vec2::default_instance_->InitAsDefaultInstance();
  f_object_color::default_instance_->InitAsDefaultInstance();
  f_object_uv::default_instance_->InitAsDefaultInstance();
  f_colider::default_instance_->InitAsDefaultInstance();
  f_object::default_instance_->InitAsDefaultInstance();
  Sprite::default_instance_->InitAsDefaultInstance();
  Layer::default_instance_->InitAsDefaultInstance();
  Scence::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_f_5fobject_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_f_5fobject_2eproto {
  StaticDescriptorInitializer_f_5fobject_2eproto() {
    protobuf_AddDesc_f_5fobject_2eproto();
  }
} static_descriptor_initializer_f_5fobject_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int f_vec2::kXFieldNumber;
const int f_vec2::kYFieldNumber;
#endif  // !_MSC_VER

f_vec2::f_vec2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:f_vec2)
}

void f_vec2::InitAsDefaultInstance() {
}

f_vec2::f_vec2(const f_vec2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:f_vec2)
}

void f_vec2::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

f_vec2::~f_vec2() {
  // @@protoc_insertion_point(destructor:f_vec2)
  SharedDtor();
}

void f_vec2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void f_vec2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* f_vec2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return f_vec2_descriptor_;
}

const f_vec2& f_vec2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_f_5fobject_2eproto();
  return *default_instance_;
}

f_vec2* f_vec2::default_instance_ = NULL;

f_vec2* f_vec2::New() const {
  return new f_vec2;
}

void f_vec2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<f_vec2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool f_vec2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:f_vec2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:f_vec2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:f_vec2)
  return false;
#undef DO_
}

void f_vec2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:f_vec2)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:f_vec2)
}

::google::protobuf::uint8* f_vec2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:f_vec2)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f_vec2)
  return target;
}

int f_vec2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void f_vec2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const f_vec2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const f_vec2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void f_vec2::MergeFrom(const f_vec2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void f_vec2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void f_vec2::CopyFrom(const f_vec2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool f_vec2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void f_vec2::Swap(f_vec2* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata f_vec2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = f_vec2_descriptor_;
  metadata.reflection = f_vec2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int f_object_color::kColorRFieldNumber;
const int f_object_color::kColorGFieldNumber;
const int f_object_color::kColorBFieldNumber;
const int f_object_color::kColorAFieldNumber;
#endif  // !_MSC_VER

f_object_color::f_object_color()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:f_object_color)
}

void f_object_color::InitAsDefaultInstance() {
}

f_object_color::f_object_color(const f_object_color& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:f_object_color)
}

void f_object_color::SharedCtor() {
  _cached_size_ = 0;
  color_r_ = 0;
  color_g_ = 0;
  color_b_ = 0;
  color_a_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

f_object_color::~f_object_color() {
  // @@protoc_insertion_point(destructor:f_object_color)
  SharedDtor();
}

void f_object_color::SharedDtor() {
  if (this != default_instance_) {
  }
}

void f_object_color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* f_object_color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return f_object_color_descriptor_;
}

const f_object_color& f_object_color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_f_5fobject_2eproto();
  return *default_instance_;
}

f_object_color* f_object_color::default_instance_ = NULL;

f_object_color* f_object_color::New() const {
  return new f_object_color;
}

void f_object_color::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<f_object_color*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(color_r_, color_a_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool f_object_color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:f_object_color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float color_r = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_r_)));
          set_has_color_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_color_g;
        break;
      }

      // required float color_g = 2;
      case 2: {
        if (tag == 21) {
         parse_color_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_g_)));
          set_has_color_g();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_color_b;
        break;
      }

      // required float color_b = 3;
      case 3: {
        if (tag == 29) {
         parse_color_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_b_)));
          set_has_color_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_color_a;
        break;
      }

      // required float color_a = 4;
      case 4: {
        if (tag == 37) {
         parse_color_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_a_)));
          set_has_color_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:f_object_color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:f_object_color)
  return false;
#undef DO_
}

void f_object_color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:f_object_color)
  // required float color_r = 1;
  if (has_color_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->color_r(), output);
  }

  // required float color_g = 2;
  if (has_color_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->color_g(), output);
  }

  // required float color_b = 3;
  if (has_color_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->color_b(), output);
  }

  // required float color_a = 4;
  if (has_color_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->color_a(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:f_object_color)
}

::google::protobuf::uint8* f_object_color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:f_object_color)
  // required float color_r = 1;
  if (has_color_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->color_r(), target);
  }

  // required float color_g = 2;
  if (has_color_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->color_g(), target);
  }

  // required float color_b = 3;
  if (has_color_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->color_b(), target);
  }

  // required float color_a = 4;
  if (has_color_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->color_a(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f_object_color)
  return target;
}

int f_object_color::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float color_r = 1;
    if (has_color_r()) {
      total_size += 1 + 4;
    }

    // required float color_g = 2;
    if (has_color_g()) {
      total_size += 1 + 4;
    }

    // required float color_b = 3;
    if (has_color_b()) {
      total_size += 1 + 4;
    }

    // required float color_a = 4;
    if (has_color_a()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void f_object_color::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const f_object_color* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const f_object_color*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void f_object_color::MergeFrom(const f_object_color& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color_r()) {
      set_color_r(from.color_r());
    }
    if (from.has_color_g()) {
      set_color_g(from.color_g());
    }
    if (from.has_color_b()) {
      set_color_b(from.color_b());
    }
    if (from.has_color_a()) {
      set_color_a(from.color_a());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void f_object_color::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void f_object_color::CopyFrom(const f_object_color& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool f_object_color::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void f_object_color::Swap(f_object_color* other) {
  if (other != this) {
    std::swap(color_r_, other->color_r_);
    std::swap(color_g_, other->color_g_);
    std::swap(color_b_, other->color_b_);
    std::swap(color_a_, other->color_a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata f_object_color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = f_object_color_descriptor_;
  metadata.reflection = f_object_color_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int f_object_uv::kXyFieldNumber;
const int f_object_uv::kZwFieldNumber;
#endif  // !_MSC_VER

f_object_uv::f_object_uv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:f_object_uv)
}

void f_object_uv::InitAsDefaultInstance() {
  xy_ = const_cast< ::f_vec2*>(&::f_vec2::default_instance());
  zw_ = const_cast< ::f_vec2*>(&::f_vec2::default_instance());
}

f_object_uv::f_object_uv(const f_object_uv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:f_object_uv)
}

void f_object_uv::SharedCtor() {
  _cached_size_ = 0;
  xy_ = NULL;
  zw_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

f_object_uv::~f_object_uv() {
  // @@protoc_insertion_point(destructor:f_object_uv)
  SharedDtor();
}

void f_object_uv::SharedDtor() {
  if (this != default_instance_) {
    delete xy_;
    delete zw_;
  }
}

void f_object_uv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* f_object_uv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return f_object_uv_descriptor_;
}

const f_object_uv& f_object_uv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_f_5fobject_2eproto();
  return *default_instance_;
}

f_object_uv* f_object_uv::default_instance_ = NULL;

f_object_uv* f_object_uv::New() const {
  return new f_object_uv;
}

void f_object_uv::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_xy()) {
      if (xy_ != NULL) xy_->::f_vec2::Clear();
    }
    if (has_zw()) {
      if (zw_ != NULL) zw_->::f_vec2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool f_object_uv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:f_object_uv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .f_vec2 xy = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_zw;
        break;
      }

      // required .f_vec2 zw = 2;
      case 2: {
        if (tag == 18) {
         parse_zw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:f_object_uv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:f_object_uv)
  return false;
#undef DO_
}

void f_object_uv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:f_object_uv)
  // required .f_vec2 xy = 1;
  if (has_xy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->xy(), output);
  }

  // required .f_vec2 zw = 2;
  if (has_zw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->zw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:f_object_uv)
}

::google::protobuf::uint8* f_object_uv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:f_object_uv)
  // required .f_vec2 xy = 1;
  if (has_xy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->xy(), target);
  }

  // required .f_vec2 zw = 2;
  if (has_zw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->zw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f_object_uv)
  return target;
}

int f_object_uv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .f_vec2 xy = 1;
    if (has_xy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xy());
    }

    // required .f_vec2 zw = 2;
    if (has_zw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zw());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void f_object_uv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const f_object_uv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const f_object_uv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void f_object_uv::MergeFrom(const f_object_uv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xy()) {
      mutable_xy()->::f_vec2::MergeFrom(from.xy());
    }
    if (from.has_zw()) {
      mutable_zw()->::f_vec2::MergeFrom(from.zw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void f_object_uv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void f_object_uv::CopyFrom(const f_object_uv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool f_object_uv::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_xy()) {
    if (!this->xy().IsInitialized()) return false;
  }
  if (has_zw()) {
    if (!this->zw().IsInitialized()) return false;
  }
  return true;
}

void f_object_uv::Swap(f_object_uv* other) {
  if (other != this) {
    std::swap(xy_, other->xy_);
    std::swap(zw_, other->zw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata f_object_uv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = f_object_uv_descriptor_;
  metadata.reflection = f_object_uv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int f_colider::kPosFieldNumber;
const int f_colider::kDimFieldNumber;
#endif  // !_MSC_VER

f_colider::f_colider()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:f_colider)
}

void f_colider::InitAsDefaultInstance() {
  pos_ = const_cast< ::f_vec2*>(&::f_vec2::default_instance());
  dim_ = const_cast< ::f_vec2*>(&::f_vec2::default_instance());
}

f_colider::f_colider(const f_colider& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:f_colider)
}

void f_colider::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  dim_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

f_colider::~f_colider() {
  // @@protoc_insertion_point(destructor:f_colider)
  SharedDtor();
}

void f_colider::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete dim_;
  }
}

void f_colider::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* f_colider::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return f_colider_descriptor_;
}

const f_colider& f_colider::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_f_5fobject_2eproto();
  return *default_instance_;
}

f_colider* f_colider::default_instance_ = NULL;

f_colider* f_colider::New() const {
  return new f_colider;
}

void f_colider::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::f_vec2::Clear();
    }
    if (has_dim()) {
      if (dim_ != NULL) dim_->::f_vec2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool f_colider::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:f_colider)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .f_vec2 pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dim;
        break;
      }

      // required .f_vec2 dim = 2;
      case 2: {
        if (tag == 18) {
         parse_dim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dim()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:f_colider)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:f_colider)
  return false;
#undef DO_
}

void f_colider::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:f_colider)
  // required .f_vec2 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pos(), output);
  }

  // required .f_vec2 dim = 2;
  if (has_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dim(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:f_colider)
}

::google::protobuf::uint8* f_colider::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:f_colider)
  // required .f_vec2 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pos(), target);
  }

  // required .f_vec2 dim = 2;
  if (has_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dim(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f_colider)
  return target;
}

int f_colider::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .f_vec2 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required .f_vec2 dim = 2;
    if (has_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dim());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void f_colider::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const f_colider* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const f_colider*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void f_colider::MergeFrom(const f_colider& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::f_vec2::MergeFrom(from.pos());
    }
    if (from.has_dim()) {
      mutable_dim()->::f_vec2::MergeFrom(from.dim());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void f_colider::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void f_colider::CopyFrom(const f_colider& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool f_colider::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_dim()) {
    if (!this->dim().IsInitialized()) return false;
  }
  return true;
}

void f_colider::Swap(f_colider* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(dim_, other->dim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata f_colider::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = f_colider_descriptor_;
  metadata.reflection = f_colider_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int f_object::kNameFieldNumber;
const int f_object::kTypeFieldNumber;
const int f_object::kUvFieldNumber;
const int f_object::kWidthFieldNumber;
const int f_object::kHeighFieldNumber;
const int f_object::kColorFieldNumber;
const int f_object::kColiderListFieldNumber;
const int f_object::kTexturePathFieldNumber;
#endif  // !_MSC_VER

f_object::f_object()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:f_object)
}

void f_object::InitAsDefaultInstance() {
  uv_ = const_cast< ::f_object_uv*>(&::f_object_uv::default_instance());
  color_ = const_cast< ::f_object_color*>(&::f_object_color::default_instance());
}

f_object::f_object(const f_object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:f_object)
}

void f_object::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  uv_ = NULL;
  width_ = 0;
  heigh_ = 0;
  color_ = NULL;
  texturepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

f_object::~f_object() {
  // @@protoc_insertion_point(destructor:f_object)
  SharedDtor();
}

void f_object::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (texturepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete texturepath_;
  }
  if (this != default_instance_) {
    delete uv_;
    delete color_;
  }
}

void f_object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* f_object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return f_object_descriptor_;
}

const f_object& f_object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_f_5fobject_2eproto();
  return *default_instance_;
}

f_object* f_object::default_instance_ = NULL;

f_object* f_object::New() const {
  return new f_object;
}

void f_object::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<f_object*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(type_, width_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_uv()) {
      if (uv_ != NULL) uv_->::f_object_uv::Clear();
    }
    heigh_ = 0;
    if (has_color()) {
      if (color_ != NULL) color_->::f_object_color::Clear();
    }
    if (has_texturepath()) {
      if (texturepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        texturepath_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  coliderlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool f_object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:f_object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_uv;
        break;
      }

      // required .f_object_uv uv = 3;
      case 3: {
        if (tag == 26) {
         parse_uv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_width;
        break;
      }

      // required float width = 4;
      case 4: {
        if (tag == 37) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_heigh;
        break;
      }

      // required float heigh = 5;
      case 5: {
        if (tag == 45) {
         parse_heigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heigh_)));
          set_has_heigh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_color;
        break;
      }

      // required .f_object_color color = 6;
      case 6: {
        if (tag == 50) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_coliderList;
        break;
      }

      // repeated .f_colider coliderList = 7;
      case 7: {
        if (tag == 58) {
         parse_coliderList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coliderlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_coliderList;
        if (input->ExpectTag(66)) goto parse_texturePath;
        break;
      }

      // required string texturePath = 8;
      case 8: {
        if (tag == 66) {
         parse_texturePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_texturepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->texturepath().data(), this->texturepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "texturepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:f_object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:f_object)
  return false;
#undef DO_
}

void f_object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:f_object)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required .f_object_uv uv = 3;
  if (has_uv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->uv(), output);
  }

  // required float width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->width(), output);
  }

  // required float heigh = 5;
  if (has_heigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->heigh(), output);
  }

  // required .f_object_color color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->color(), output);
  }

  // repeated .f_colider coliderList = 7;
  for (int i = 0; i < this->coliderlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->coliderlist(i), output);
  }

  // required string texturePath = 8;
  if (has_texturepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->texturepath().data(), this->texturepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "texturepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->texturepath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:f_object)
}

::google::protobuf::uint8* f_object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:f_object)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required .f_object_uv uv = 3;
  if (has_uv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->uv(), target);
  }

  // required float width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->width(), target);
  }

  // required float heigh = 5;
  if (has_heigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->heigh(), target);
  }

  // required .f_object_color color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->color(), target);
  }

  // repeated .f_colider coliderList = 7;
  for (int i = 0; i < this->coliderlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->coliderlist(i), target);
  }

  // required string texturePath = 8;
  if (has_texturepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->texturepath().data(), this->texturepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "texturepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->texturepath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f_object)
  return target;
}

int f_object::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required .f_object_uv uv = 3;
    if (has_uv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uv());
    }

    // required float width = 4;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // required float heigh = 5;
    if (has_heigh()) {
      total_size += 1 + 4;
    }

    // required .f_object_color color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

    // required string texturePath = 8;
    if (has_texturepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->texturepath());
    }

  }
  // repeated .f_colider coliderList = 7;
  total_size += 1 * this->coliderlist_size();
  for (int i = 0; i < this->coliderlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coliderlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void f_object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const f_object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const f_object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void f_object::MergeFrom(const f_object& from) {
  GOOGLE_CHECK_NE(&from, this);
  coliderlist_.MergeFrom(from.coliderlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uv()) {
      mutable_uv()->::f_object_uv::MergeFrom(from.uv());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_heigh()) {
      set_heigh(from.heigh());
    }
    if (from.has_color()) {
      mutable_color()->::f_object_color::MergeFrom(from.color());
    }
    if (from.has_texturepath()) {
      set_texturepath(from.texturepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void f_object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void f_object::CopyFrom(const f_object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool f_object::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000bf) != 0x000000bf) return false;

  if (has_uv()) {
    if (!this->uv().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->coliderlist())) return false;
  return true;
}

void f_object::Swap(f_object* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(uv_, other->uv_);
    std::swap(width_, other->width_);
    std::swap(heigh_, other->heigh_);
    std::swap(color_, other->color_);
    coliderlist_.Swap(&other->coliderlist_);
    std::swap(texturepath_, other->texturepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata f_object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = f_object_descriptor_;
  metadata.reflection = f_object_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sprite::kXPosFieldNumber;
const int Sprite::kYPosFieldNumber;
const int Sprite::kXScaleFieldNumber;
const int Sprite::kYScaleFieldNumber;
const int Sprite::kAngleFieldNumber;
const int Sprite::kPrefabFieldNumber;
#endif  // !_MSC_VER

Sprite::Sprite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Sprite)
}

void Sprite::InitAsDefaultInstance() {
}

Sprite::Sprite(const Sprite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Sprite)
}

void Sprite::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  x_pos_ = 0;
  y_pos_ = 0;
  x_scale_ = 0;
  y_scale_ = 0;
  angle_ = 0;
  prefab_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sprite::~Sprite() {
  // @@protoc_insertion_point(destructor:Sprite)
  SharedDtor();
}

void Sprite::SharedDtor() {
  if (prefab_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prefab_;
  }
  if (this != default_instance_) {
  }
}

void Sprite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sprite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sprite_descriptor_;
}

const Sprite& Sprite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_f_5fobject_2eproto();
  return *default_instance_;
}

Sprite* Sprite::default_instance_ = NULL;

Sprite* Sprite::New() const {
  return new Sprite;
}

void Sprite::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Sprite*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(x_pos_, y_scale_);
    angle_ = 0;
    if (has_prefab()) {
      if (prefab_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        prefab_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sprite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Sprite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x_pos = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_pos_)));
          set_has_x_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y_pos;
        break;
      }

      // required float y_pos = 2;
      case 2: {
        if (tag == 21) {
         parse_y_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_pos_)));
          set_has_y_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_x_scale;
        break;
      }

      // required float x_scale = 3;
      case 3: {
        if (tag == 29) {
         parse_x_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_scale_)));
          set_has_x_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_y_scale;
        break;
      }

      // required float y_scale = 4;
      case 4: {
        if (tag == 37) {
         parse_y_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_scale_)));
          set_has_y_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_angle;
        break;
      }

      // required float angle = 5;
      case 5: {
        if (tag == 45) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_prefab;
        break;
      }

      // required string prefab = 6;
      case 6: {
        if (tag == 50) {
         parse_prefab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefab()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefab().data(), this->prefab().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "prefab");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Sprite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Sprite)
  return false;
#undef DO_
}

void Sprite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Sprite)
  // required float x_pos = 1;
  if (has_x_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_pos(), output);
  }

  // required float y_pos = 2;
  if (has_y_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_pos(), output);
  }

  // required float x_scale = 3;
  if (has_x_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x_scale(), output);
  }

  // required float y_scale = 4;
  if (has_y_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y_scale(), output);
  }

  // required float angle = 5;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->angle(), output);
  }

  // required string prefab = 6;
  if (has_prefab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefab().data(), this->prefab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefab");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->prefab(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Sprite)
}

::google::protobuf::uint8* Sprite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Sprite)
  // required float x_pos = 1;
  if (has_x_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_pos(), target);
  }

  // required float y_pos = 2;
  if (has_y_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_pos(), target);
  }

  // required float x_scale = 3;
  if (has_x_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x_scale(), target);
  }

  // required float y_scale = 4;
  if (has_y_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y_scale(), target);
  }

  // required float angle = 5;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->angle(), target);
  }

  // required string prefab = 6;
  if (has_prefab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefab().data(), this->prefab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefab");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->prefab(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Sprite)
  return target;
}

int Sprite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x_pos = 1;
    if (has_x_pos()) {
      total_size += 1 + 4;
    }

    // required float y_pos = 2;
    if (has_y_pos()) {
      total_size += 1 + 4;
    }

    // required float x_scale = 3;
    if (has_x_scale()) {
      total_size += 1 + 4;
    }

    // required float y_scale = 4;
    if (has_y_scale()) {
      total_size += 1 + 4;
    }

    // required float angle = 5;
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // required string prefab = 6;
    if (has_prefab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefab());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sprite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sprite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sprite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sprite::MergeFrom(const Sprite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_pos()) {
      set_x_pos(from.x_pos());
    }
    if (from.has_y_pos()) {
      set_y_pos(from.y_pos());
    }
    if (from.has_x_scale()) {
      set_x_scale(from.x_scale());
    }
    if (from.has_y_scale()) {
      set_y_scale(from.y_scale());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_prefab()) {
      set_prefab(from.prefab());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sprite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sprite::CopyFrom(const Sprite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sprite::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Sprite::Swap(Sprite* other) {
  if (other != this) {
    std::swap(x_pos_, other->x_pos_);
    std::swap(y_pos_, other->y_pos_);
    std::swap(x_scale_, other->x_scale_);
    std::swap(y_scale_, other->y_scale_);
    std::swap(angle_, other->angle_);
    std::swap(prefab_, other->prefab_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sprite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sprite_descriptor_;
  metadata.reflection = Sprite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Layer::kNameFieldNumber;
const int Layer::kDepthFieldNumber;
const int Layer::kObjectsFieldNumber;
#endif  // !_MSC_VER

Layer::Layer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Layer)
}

void Layer::InitAsDefaultInstance() {
}

Layer::Layer(const Layer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Layer)
}

void Layer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  depth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:Layer)
  SharedDtor();
}

void Layer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Layer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Layer_descriptor_;
}

const Layer& Layer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_f_5fobject_2eproto();
  return *default_instance_;
}

Layer* Layer::default_instance_ = NULL;

Layer* Layer::New() const {
  return new Layer;
}

void Layer::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    depth_ = 0;
  }
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Layer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_depth;
        break;
      }

      // required int32 depth = 2;
      case 2: {
        if (tag == 16) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_objects;
        break;
      }

      // repeated .Sprite objects = 3;
      case 3: {
        if (tag == 26) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_objects;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Layer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Layer)
  return false;
#undef DO_
}

void Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Layer)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 depth = 2;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->depth(), output);
  }

  // repeated .Sprite objects = 3;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->objects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Layer)
}

::google::protobuf::uint8* Layer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Layer)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 depth = 2;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->depth(), target);
  }

  // repeated .Sprite objects = 3;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->objects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Layer)
  return target;
}

int Layer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 depth = 2;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

  }
  // repeated .Sprite objects = 3;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Layer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Layer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Layer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Layer::MergeFrom(const Layer& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Layer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layer::CopyFrom(const Layer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->objects())) return false;
  return true;
}

void Layer::Swap(Layer* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(depth_, other->depth_);
    objects_.Swap(&other->objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Layer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Layer_descriptor_;
  metadata.reflection = Layer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Scence::kNameFieldNumber;
const int Scence::kLayersFieldNumber;
#endif  // !_MSC_VER

Scence::Scence()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Scence)
}

void Scence::InitAsDefaultInstance() {
}

Scence::Scence(const Scence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Scence)
}

void Scence::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scence::~Scence() {
  // @@protoc_insertion_point(destructor:Scence)
  SharedDtor();
}

void Scence::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Scence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scence_descriptor_;
}

const Scence& Scence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_f_5fobject_2eproto();
  return *default_instance_;
}

Scence* Scence::default_instance_ = NULL;

Scence* Scence::New() const {
  return new Scence;
}

void Scence::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Scence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Scence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        break;
      }

      // repeated .Layer layers = 2;
      case 2: {
        if (tag == 18) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Scence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Scence)
  return false;
#undef DO_
}

void Scence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Scence)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .Layer layers = 2;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Scence)
}

::google::protobuf::uint8* Scence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Scence)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .Layer layers = 2;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->layers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Scence)
  return target;
}

int Scence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Layer layers = 2;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Scence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Scence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scence::MergeFrom(const Scence& from) {
  GOOGLE_CHECK_NE(&from, this);
  layers_.MergeFrom(from.layers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Scence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scence::CopyFrom(const Scence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scence::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->layers())) return false;
  return true;
}

void Scence::Swap(Scence* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    layers_.Swap(&other->layers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Scence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scence_descriptor_;
  metadata.reflection = Scence_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
